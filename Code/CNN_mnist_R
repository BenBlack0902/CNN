# Aufgabe 1      CNN 

# Disable warnings
options(warn=-1)


# Clear workspace
graphics.off()
#rm(list=ls())


# Experimental setup
num_train = 5000   # 60000 for full data set 
num_test  =  500   # 10000 for full data set



#########################
# Load and prepare data #
#########################

# Load MNIST data
mnist = dataset_mnist()

str(mnist)

# Assign train and test data+labels
train_data  = mnist$train$x
train_label = mnist$train$y

test_data  = mnist$test$x
test_label = mnist$test$y




################################
# Train and run classification #
################################



# Load the mnist data's training and testing dataset
mnist <- dataset_mnist()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y

# Define a few parameters to be used in the CNN model
batch_size <- 128
num_classes <- 10
epochs <- 10

# Input image dimensions
img_rows <- 28
img_cols <- 28



#Train Reshape to fit 
x_train <- array_reshape(x_train, c(nrow(x_train), img_rows, img_cols, 1))

#to_check if ok
dim(x_train)

x_test <- array_reshape(x_test, c(nrow(x_test), img_rows, img_cols, 1))
input_shape <- c(img_rows, img_cols, 1)

#to_check if ok
dim(x_train)


str(x_train)


#Scale
x_train <- x_train / 255
x_test <- x_test / 255


# Convert class vectors to binary class matrices
y_train <- to_categorical(y_train, num_classes)
y_test <- to_categorical(y_test, num_classes)



# define model structure 
cnn_model <- keras_model_sequential() %>%
  layer_conv_2d(filters = 32, kernel_size = c(3,3), activation = 'relu', input_shape = input_shape) %>% 
  layer_max_pooling_2d(pool_size = c(2, 2)) %>% 
  layer_conv_2d(filters = 64, kernel_size = c(3,3), activation = 'relu') %>% 
  layer_max_pooling_2d(pool_size = c(2, 2)) %>% 
  layer_dropout(rate = 0.25) %>% 
  layer_flatten() %>% 
  layer_dense(units = 128, activation = 'relu') %>% 
  layer_dropout(rate = 0.5) %>% 
  layer_dense(units = num_classes, activation = 'softmax')



# Compile model
cnn_model %>% compile(
  loss = loss_categorical_crossentropy,
  optimizer = optimizer_adadelta(),
  metrics = c('accuracy')
)



cnn_history <- cnn_model %>% fit(
  x_train, y_train,
  batch_size = batch_size,
  epochs = epochs,
  validation_split = 0.2
)



plot(cnn_history)



#evaluate CNN

cnn_model %>% evaluate(x_test, y_test)






